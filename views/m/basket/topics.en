[% INCLUDE start.en %]

<h2>Basket</h2>

[% IF topics.0 %]<div class="table-responsive">
        <table class="table table-striped">
            <thead class="thead-dark">
<tr>
<th>Classify</th>
<th>Title</th>
<th>Price</th>
<th>Qty</th>
<th>S&H</th>
<th>Total</th>
</tr>
</thead>
<tbody>[% FOREACH item=topics %]
<tr>
<td>[% IF (item.classify=='package') %]Package[% ELSE %]Item[% END %]</td>
<td>[% item.title %]</td>
<td>$[% item.price %]</td>
<form name=basket[% item.basketid %] class="form-inline" action=basket method="post"><input type=hidden name="action" value="update"><input type=hidden name="basketid" value=[% item.basketid %]>
<td><input type=text class="form-control-inline col-2" name="qty" value="[% item.qty %]"><button type=submit class="btn btn-sm btn-primary">Upd</button> <a class="btn btn-sm btn-info" href="basket?action=delete&basketid=[% item.basketid %]">Remove</a></td></form>
<td align=right>$[% item.shipping %]</td>
<td align=right>$[% item.amount %]</td>
</tr>
[% END %]<tr><td colspan=6 align=right>$[% amount %]</td></tr>
</tbody>
</table>
[% SET need = amount + shipping %]
[% SET shop = ledger_currentBalance.0.shop_balance %]
[% SET balance = ledger_currentBalance.0.balance %]
[% SET have = shop+balance %]
<div class="cell example example5" id="example-5">
  <form id="payment-form" action="sale" method="post">
    <input type=hidden name="action" value="buy">
    <input type=hidden name="method" value="debt">
    <div id="card-element">
      <!-- Elements will create input elements here -->
    </div>

    <!-- We'll put the error messages in this element -->
    <div id="card-errors" role="alert"></div>

    <button id="submit">Pay</button>
  </form>
</div>

<script>
(function() {
  var stripe = Stripe('[% StripeAPIPubKey %]');
  var elements = stripe.elements({
    // Stripe's examples are localized to specific languages, but if
    // you wish to have Elements automatically detect your user's locale,
    // use `locale: 'auto'` instead.
    locale: window.__exampleLocale
  });

  /**
   * Card Element
   */
  var card = elements.create("card", {
    iconStyle: "solid",
    style: {
      base: {
        iconColor: "#fff",
        color: "#fff",
        fontWeight: 400,
        fontFamily: "Helvetica Neue, Helvetica, Arial, sans-serif",
        fontSize: "16px",
        fontSmoothing: "antialiased",

        "::placeholder": {
          color: "#BFAEF6"
        },
        ":-webkit-autofill": {
          color: "#fce883"
        }
      },
      invalid: {
        iconColor: "#FFC7EE",
        color: "#FFC7EE"
      }
    }
  });
  card.mount("#card-element");

  /**
   * Payment Request Element
   */
  var paymentRequest = stripe.paymentRequest({
    country: "MX",
    currency: "mxn",
    total: {
      amount: [% need %],
      label: "Total"
    },
    requestShipping: false,
  });
  paymentRequest.on("token", function(result) {
    var example = document.querySelector(".example5");
    example.querySelector(".token").innerText = result.token.id;
    example.classList.add("submitted");
    result.complete("success");
  });

  var paymentRequestElement = elements.create("paymentRequestButton", {
    paymentRequest: paymentRequest,
    style: {
      paymentRequestButton: {
        theme: "light"
      }
    }
  });

  paymentRequest.canMakePayment().then(function(result) {
    if (result) {
      document.querySelector(".example5 .card-only").style.display = "none";
      document.querySelector(
        ".example5 .payment-request-available"
      ).style.display =
        "block";
      paymentRequestElement.mount("#example5-paymentRequest");
    }
  });
  function registerElements(elements, exampleName) {
    var formClass = '.' + exampleName;
    var example = document.querySelector(formClass);

    var form = example.querySelector('form');
    var resetButton = example.querySelector('a.reset');
    var error = form.querySelector('.error');
    var errorMessage = error.querySelector('.message');

    function enableInputs() {
      Array.prototype.forEach.call(
        form.querySelectorAll(
          "input[type='text'], input[type='email'], input[type='tel']"
        ),
        function(input) {
          input.removeAttribute('disabled');
        }
      );
    }

    function disableInputs() {
      Array.prototype.forEach.call(
        form.querySelectorAll(
          "input[type='text'], input[type='email'], input[type='tel']"
        ),
        function(input) {
          input.setAttribute('disabled', 'true');
        }
      );
    }

    // Listen for errors from each Element, and show error messages in the UI.
    elements.forEach(function(element) {
      element.on('change', function(event) {
        if (event.error) {
          error.classList.add('visible');
          errorMessage.innerText = event.error.message;
        } else {
          error.classList.remove('visible');
        }
      });
    });

    // Listen on the form's 'submit' handler...
    form.addEventListener('submit', function(e) {
      e.preventDefault();

      // Show a loading screen...
      example.classList.add('submitting');

      // Disable all inputs.
      disableInputs();

      // Gather additional customer data we may have collected in our form.
      var name = form.querySelector('#' + exampleName + '-name');
      var address1 = form.querySelector('#' + exampleName + '-address');
      var city = form.querySelector('#' + exampleName + '-city');
      var state = form.querySelector('#' + exampleName + '-state');
      var zip = form.querySelector('#' + exampleName + '-zip');
      var additionalData = {
        name: name ? name.value : undefined,
        address_line1: address1 ? address1.value : undefined,
        address_city: city ? city.value : undefined,
        address_state: state ? state.value : undefined,
        address_zip: zip ? zip.value : undefined,
      };

      // Use Stripe.js to create a token. We only need to pass in one Element
      // from the Element group in order to create a token. We can also pass
      // in the additional customer data we collected in our form.
      stripe.createToken(elements[0], additionalData).then(function(result) {
        // Stop loading!
        example.classList.remove('submitting');

        if (result.token) {
          // If we received a token, show the token ID.
          example.querySelector('.token').innerText = result.token.id;
          example.classList.add('submitted');
        } else {
          // Otherwise, un-disable inputs.
          enableInputs();
        }
      });
    });

    resetButton.addEventListener('click', function(e) {
      e.preventDefault();
      // Resetting the form (instead of setting the value to `''` for each input)
      // helps us clear webkit autofill styles.
      form.reset();

      // Clear each Element.
      elements.forEach(function(element) {
        element.clear();
      });

      // Reset error state as well.
      error.classList.remove('visible');

      // Resetting the form does not un-disable inputs, so we need to do it separately:
      enableInputs();
      example.classList.remove('submitted');
    });
  }
  registerElements([card], "example5");
})();
</script>

[% ELSE %]
<h4>Empty</h4>
[% END %]

[% INCLUDE end.en %]
